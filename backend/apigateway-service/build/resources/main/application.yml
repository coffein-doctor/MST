server:
  port: 8000

# eureka 클라이언트 설정 (eureka 서버와 연결)
eureka:
  client:
    # eureka 서버에 등록할지 여부
    register-with-eureka: true
    # eureka 서버로 부터 인스턴스들의 정보를 가져올 것인지 설정하는 속성
    fetch-registry: true
    # eureka 서버 주소에 마이크로서비스 정보 등록
    service-url:
#      defaultZone: http://admin:mst0117@3.36.123.194:8761/eureka
      defaultZone: http://${EUREKA.USERNAME}:${EUREKA.PASSWORD}@${EUREKA.IP}:8761/eureka

spring:
  application:
    name: apigateway-service
  config:
    import:
      - application-secret.yml
  cloud:
    gateway:
      routes:
        - id: user-service-swagger
          uri: http://localhost:8081
#          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/swagger-ui/**, /user-service/v3/**
        # 소셜 로그인 관련 요청
        - id: user-service
          uri: lb://USER-SERVICE
#          uri: http://localhost:8081
          predicates:
            - Path=/user-service/oauth2/authorization/**, /user-service/login/**
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}
        #Acccess 토큰 재발급
        - id: user-service
          uri: lb://USER-SERVICE
#          uri: http://localhost:8081
          predicates:
            - Path=/user-service/token/reissue
            - Method=POST
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}
        #  나머지
        - id: user-service
          uri: lb://USER-SERVICE
#          uri: http://localhost:8081
          predicates:
            - Path=/user-service/**
          filters:
            # 쿠키 초기화
#            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}
            - AuthorizationHeaderFilter

        - id: beverage-service-swagger
          uri: http://localhost:8082
          #          uri: lb://BEVERAGE-SERVICE
          predicates:
            - Path=/beverage-service/swagger-ui/**, /beverage-service/v3/**
        - id: beverage-service
          uri: lb://BEVERAGE-SERVICE
          predicates:
            - Path=/beverage-service/**
          filters:
            # 쿠키 초기화
#            - RemoveRequestHeader=Cookie
            - RewritePath=/beverage-service/(?<segment>.*),/$\{segment}
#            - AuthorizationHeaderFilter

        - id: community-service-swagger
          uri: http://localhost:8083
          #          uri: lb://COMMUNITY-SERVICE
          predicates:
            - Path=/community-service/swagger-ui/**, /community-service/v3/**
        - id: community-service
          uri: lb://COMMUNITY-SERVICE
          predicates:
            - Path=/community-service/**
          filters:
#            - RemoveRequestHeader=Cookie
            - RewritePath=/community-service/(?<segment>.*),/$\{segment}
#            - AuthorizationHeaderFilter


#        - id: user-service
          # 어디로 이동할거니?,
          # 유레카 서버에 등록된 이름으로, 로드밸런싱 적용
          # 기존 http 주소로 가는 것이 아니라 유레카 서버에 가서 클라이언트 요청정보를 알려주겠다.
#          uri: lb://USER-SERVICE
#          # 조건절
#          predicates:
#            - Path=/user-service/**
#          filters:
#            - RewritePath=/user-service/(?<segment>.*),/$\{segment}
#            - name: CustomFilter
#            - name: LoggingFilter
#              args:
#                baseMessage: Spring Cloud Gateway LoggingFilter
#                preLogger: true
#                postLogger: true
#            - AddRequestHeader=user-request, user-request-header # key, value 형태 {headerName: headerValue} 요청할 때
#            - AddResponseHeader=user-response, user-response-header # header 삽입, 반환할 때
#        - id: beverage-service
#          uri: lb://BEVERAGE-SERVICE
#          predicates:
#            - Path=/beverage-service/**
#          filters:
#            - RewritePath=/beverage-service/(?<segment>.*),/$\{segment}
#            - name: CustomFilter
#            - name: LoggingFilter
#              args:
#                baseMessage: Spring Cloud Gateway LoggingFilter
#                preLogger: true
#                postLogger: true
##            - AddRequestHeader=beverage-request, beverage-request-header # {headerName: headerValue} header 삽입, 요청할 때
##            - AddResponseHeader=beverage-response, beverage-response-header # header 삽입, 반환할 때

#springdoc:
#  api-docs:
#    enabled: true
#    groups:
#      enabled: true
#  swagger-ui:
#    enabled: true
#    path: /swagger-ui/index.html
#    config-url: /v3/api-docs/swagger-config
#    urls:
#      #      - url: /v3/api-docs
#      #        name: API Gateway Service
#      #        primaryName: API Gateway Service
#      - url: /user-service/v3/api-docs
#        name: user-service
#      - url: /beverage-service/v3/api-docs
#        name: beverage-service
#      - url: /community-service/v3/api-docs
#        name: community-service