# 현재 프로젝트 포트 지정
server:
  port: 8081
#  servlet:
#    context-path: /api/v1
#  port: 0
# 현재 프로젝트 이름 지정
spring:
  application:
    name: user-service
  config:
    import:
      - application-oauth.yml
      - application-secret.yml
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DATABASE.DATASOURCE.URL}
#    url: jdbc:mysql://3.36.123.194:3306/mst?useSSL=false&serverTimezone=UTC
    username: ${DATABASE.DATASOURCE.USERNAME}
    password: ${DATABASE.DATASOURCE.PASSWORD}
  #    password: mst@0117
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQLDialect
    # 데이터베이스 스키마를 자동으로 업데이트할지 여부 (db 초기화 전략. create: 기존 테이블 삭제 후 생성)
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        # SQL 쿼리를 로그로 출력할지 여부
        show-sql: true
        # JPA의 구현체인 Hibernate가 동작하면서 발생한 SQL의 가독성을 높여준다.
        format_sql: true
  jackson:
    time-zone: Asia/Seoul
#  security:
#    oauth2:
#      client:
#        registration:
#          kakao:
#            client-id: 4c2e4d4852cafb55e5d18db0521ecee3
#            redirect-uri: http://3.36.123.194:8081/login/oauth2/code/kakao # http://localhost:8081/login/oauth2/code/kakao
##            redirect-uri: http://localhost:8081/login/oauth2/code/kakao
##            redirect-uri: {baseUrl}/login/oauth2/code/{registrationId} # http://localhost:8081/login/oauth2/code/kakao
#            client-authentication-method: client_secret_post
#            client-secret: NkzavTQYRPwGRFgbWHTtLxc7Zsr2Ncuf
#            authorization-grant-type: authorization_code
#            scope:
#              - profile_image
#              - account_email
#        provider:
#          kakao:
#            authorization-uri: https://kauth.kakao.com/oauth/authorize
#            token-uri: https://kauth.kakao.com/oauth/token
#            user-info-uri: https://kapi.kakao.com/v2/user/me
#            user-name-attribute: id

#jwt:
#  secret: dnflwlqrnlduqenddlrlackehfsjansjanrnldudnj

logging:
  level:
    # 디버그 모드
    com.caffeinedoctor.userservice: DEBUG
    # hibernate, jpa 성성한 SQL 쿼리 debug 로그로 남긴다.
    org.hibernate.SQL: debug
    # sql 실행 파라미터를 로그로 남긴다.
    org.hibernate.type: trace

# eureka 설정
eureka:
  instance:
    # 여러 개의 프로젝트를 실행할 때 유레카 서버에서 각각의 인스턴스를 식별하기 위해 설정 (3가지 정보로 아이디 설정)
    # 'random.value를 활용하여 랜덤 값을 생성해 각 인스턴스를 고유하게 식별
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    # eureka 등록 여부
    register-with-eureka: true
    # eureka 서버로 부터 인스턴스들의 정보를 가져올 것인지 설정하는 속성
    fetch-registry: true
    # eureka 서버 주소에 마이크로서비스 정보 등록 (접속아이디, 비밀번호)
    service-url:
      defaultZone: http://admin:mst0117@3.39.97.18:8761/eureka

greeting:
  message: Welcome to the MST Project.

springdoc:
  api-docs:
    path: /user-service/v3/api-docs
  swagger-ui:
    path: /user-service/swagger-ui.html
openapi:
  service:
    # API Gateway 포트
    url: https://${DOMAIN}/user-service
#    url: http://localhost:8000/user-service
